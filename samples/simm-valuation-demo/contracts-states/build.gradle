apply plugin: 'net.corda.plugins.cordapp'

def javaHome = System.getProperty('java.home')
def shrinkJar = file("$buildDir/libs/${project.name}-${project.version}-tiny.jar")

cordapp {
    targetPlatformVersion = corda_platform_version.toInteger()
    minimumPlatformVersion 1
    signing {
        // Cordapp is signed after the "shrink" task.
        enabled false
    }
    sealing {
        // Cannot seal JAR because other module also defines classes in the package net.corda.vega.analytics
        enabled false
    }
    contract {
        name "net/corda/vega/contracts"
        versionId 1
        vendor "R3"
        licence "Open Source (Apache 2)"
    }
}

configurations {
    shrinkArtifacts
}

dependencies {
    cordaCompile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // The SIMM demo CorDapp depends upon Cash CorDapp features
    cordapp project(':finance:contracts')

    // Corda integration dependencies
    cordaCompile project(':core')


    // Cordapp dependencies
    // Specify your cordapp's dependencies below, including dependent cordapps
    compile "com.opengamma.strata:strata-product:$strata_version"
    compile "com.opengamma.strata:strata-market:$strata_version"
}

jar {
    classifier = 'fat'
}

import proguard.gradle.ProGuardTask
task shrink(type: ProGuardTask) {
    injars jar
    outjars shrinkJar

    libraryjars "$javaHome/lib/rt.jar"
    libraryjars "$javaHome/lib/jce.jar"
    configurations.runtimeClasspath.forEach {
        libraryjars it.path, filter: '!META-INF/versions/**'
    }

    dontwarn 'afu.org.checkerframework.**'
    dontwarn 'co.paralleluniverse.**'
    dontwarn 'org.checkerframework.**'
    dontwarn 'org.joda.**'
    dontnote

    // We need to preserve our CorDapp's own directory structure so that Corda
    // can find the contract classes.
    keepdirectories 'net/corda/**'
    keepattributes '*'
    dontobfuscate
    dontoptimize
    verbose

    // These are our CorDapp classes, so don't change these.
    keep 'class net.corda.vega.** { *; }', includedescriptorclasses:true

    // Until CorDapps are isolated from each other, we need to ensure that the
    // versions of the classes that this CorDapp needs are still usable by other
    // CorDapps. Unfortunately, this means that we cannot shrink them as much as
    // we'd like to.
    keepclassmembers 'class com.opengamma.strata.** { *; }', includedescriptorclasses:true
    keepclassmembers 'class com.google.** { *; }', includedescriptorclasses:true
    keepclassmembers 'class org.joda.** { *; }', includedescriptorclasses:true
}

task sign(type: net.corda.plugins.SignJar) {
    inputJars shrink
}

jar.finalizedBy shrink
shrink.finalizedBy sign

artifacts {
    shrinkArtifacts file: sign.outputJars.singleFile, name: project.name, type: 'jar', extension: 'jar', classifier: 'tiny', builtBy: sign
}
